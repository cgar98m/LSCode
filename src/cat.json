{
	"lang": "CAT",
	"lexic": [
		{
			"id": "KW_TYPE_INT",
			"regex": "enter"
		},
		{
			"id": "KW_TYPE_CHAR",
			"regex": "caracter"
		},
		{
			"id": "KW_TYPE_BOOL",
			"regex": "boolea"
		},
		{
			"id": "KW_BOOL_TRUE",
			"regex": "cert"
		},
		{
			"id": "KW_BOOL_FALSE",
			"regex": "fals"
		},
		{
			"id": "KW_STRUCT_VAR",
			"regex": "var"
		},
		{
			"id": "KW_STRUCT_ENDVAR",
			"regex": "fivar"
		},
		{
			"id": "KW_STRUCT_IF",
			"regex": "si"
		},
		{
			"id": "KW_STRUCT_ENDIF",
			"regex": "fisi"
		},
		{
			"id": "KW_STRUCT_THEN",
			"regex": "llavors"
		},
		{
			"id": "KW_STRUCT_ELSE",
			"regex": "sino"
		},
		{
			"id": "KW_STRUCT_WHILE",
			"regex": "mentre"
		},
		{
			"id": "KW_STRUCT_ENDWHILE",
			"regex": "fimentre"
		},
		{
			"id": "KW_STRUCT_DO",
			"regex": "fer"
		},
		{
			"id": "KW_STRUCT_FUNC",
			"regex": "func"
		},
		{
			"id": "KW_STRUCT_ENDFUNC",
			"regex": "fifunc"
		},
		{
			"id": "KW_STRUCT_RETURN",
			"regex": "retorna"
		},
		{
			"id": "KW_ID",
			"regex": "[_|a-z][_a-z0-9]*"
		},
		{
			"id": "CONST_INT",
			"regex": "[0-9]+"
		},
		{
			"id": "CONST_HEX",
			"regex": "0x[0-9a-f]"
		},
		{
			"id": "CONST_CHAR",
			"regex": "\\'[a-z0-9]\\'"
		},
		{
			"id": "SP_EXP_OPEN",
			"regex": "\\{"
		},
		{
			"id": "SP_EXP_CLOSE",
			"regex": "\\}"
		},
		{
			"id": "SP_COMMENT_LINE",
			"regex": "\\/\\/"
		},
		{
			"id": "SP_COMMENT_OPEN",
			"regex": "\\/\\*"
		},
		{
			"id": "SP_COMMENT_CLOSE",
			"regex": "\\*\\/"
		},
		{
			"id": "OP_ARIT_MULT",
			"regex": "\\*"
		},
		{
			"id": "OP_ARIT_DIV",
			"regex": "\\/"
		},
		{
			"id": "OP_ARIT_MOD",
			"regex": "%"
		},
		{
			"id": "OP_ARIT_PLUS",
			"regex": "\\+"
		},
		{
			"id": "OP_ARIT_MINUS",
			"regex": "\\-"
		},
		{
			"id": "OP_REL_LT",
			"regex": "<"
		},
		{
			"id": "OP_REL_LT_EQ",
			"regex": "<="
		},
		{
			"id": "OP_REL_GT",
			"regex": ">"
		},
		{
			"id": "OP_REL_GT_EQ",
			"regex": ">="
		},
		{
			"id": "OP_REL_EQ",
			"regex": "=="
		},
		{
			"id": "OP_REL_NOT_EQ",
			"regex": "<>"
		},
		{
			"id": "OP_LOG_NOT",
			"regex": "Â¬"
		},
		{
			"id": "OP_LOG_AND",
			"regex": "\\^"
		},
		{
			"id": "OP_LOG_OR",
			"regex": "\\|"
		},
		{
			"id": "OP_ASSIGN",
			"regex": ":="
		},
		{
			"id": "OP_ASSIGN_TYPE",
			"regex": ":"
		},
		{
			"id": "OP_SEPARATOR",
			"regex": ","
		}
	],
	"grammar": [
	]
}
